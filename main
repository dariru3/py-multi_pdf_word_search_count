import fitz
import sys
import csv
from config import config

def comment_pdf(input_files:list, list_filename_csv:str):
    search_list = read_csv(list_filename_csv)
    summaries = []

    for input_file in input_files:
        matches_record = create_matches_record(search_list)

        # open pdf
        pdfIn = fitz.open(input_file)
        # Iterate throughout pdf pages
        for pg,page in enumerate(pdfIn):
            pageID = pg+1
            # UX
            sys.stdout.write(f"\rScanning page {pageID} of {input_file}...")
            sys.stdout.flush()

            # Use the search_for function to find text
            for search_settings in search_list:
                _, _, _, word = search_settings
                matched_values = page.search_for(word)
                if matched_values:
                    update_matches_record(matches_record, word, matched_values)

        # UX
        sys.stdout.write(f"Done scanning {input_file}!")
        
        # Save to output file
        for word, count in matches_record.items():
            summaries.append(create_summary(input_file, word, count))
    
    # Write the summary to a CSV file
    write_summary_to_csv(summaries, 'summary.csv')

def read_csv(list_filename_csv):
    with open(list_filename_csv, 'r', encoding='utf-8') as csv_data:
        csv_reader = csv.reader(csv_data)
        header = next(csv_reader) # skips the first row
        search_list = [[row[0], row[1], row[2], row[3]] for row in csv_reader]
    return search_list

def create_matches_record(search_list):
   return {search[3]: 0 for search in search_list}

def update_matches_record(matches_record, word, match_values):
   matches_record[word] += len(match_values)

def create_summary(input_file, word, count):
    return {
        "Input File": input_file,
        "Search Term": word,
        "Matching Instances": count
    }

def write_summary_to_csv(summaries, filename):
    with open(filename, 'w', newline='') as csv_file:
        fieldnames = ['Input File', 'Search Term', 'Matching Instances']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        writer.writeheader()
        for summary in summaries:
            writer.writerow(summary)

if __name__ == '__main__':
    comment_pdf(input_files=config["source files"], list_filename_csv=config["keywords list"])
